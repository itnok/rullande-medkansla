---
- hosts: rullandemedkansla
  gather_facts: yes

  vars_files:
    - vars/main.yml

  tasks:
    - name: "==> Set remote_user if needed"
      set_fact:
        remote_user: "{{ ansible_ssh_user }}"
      when: remote_user is not defined

    - name: "==> Install Hardware Enablement package"
      include_role:
        name: itnok.manage_pkg_ubuntu
      vars:
        manage_pkg_app_install_recommends: yes
        manage_pkg_app:
          - "linux-generic-hwe-18.04"

    - name: "==> Install Docker"
      include_role:
        name: itnok.manage_pkg_ubuntu
      vars:
        install_dependency:
          - "apt-transport-https"
          - "ca-certificates"
          - "curl"
          - "gnupg-agent"
          - "software-properties-common"
        manage_pkg_dependency: "{{ __manage_pkg_dependency + install_dependency }}"
        manage_pkg_key:
          - { url: "https://download.docker.com/linux/ubuntu/gpg", key: "" }
        manage_pkg_repo:
          - "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
        manage_pkg_app:
          - "docker-ce"

    - name: "Adding existing user '{{ remote_user }}' to group 'docker'"
      user:
        name: "{{ remote_user }}"
        groups: docker
        append: yes

    - name: "==> Upgrade the whole OS & all packages"
      include_role:
        name: itnok.update_ubuntu

    - name: "==> Install ROS 'Melodic Morenia'"
      include_role:
        name: itnok.install_ros_ubuntu
      vars:
        install_ros_distro: "melodic"
        install_ros: "ros-base"

    - name: "==> Install ROS2 'Dashing Diademata'"
      include_role:
        name: itnok.install_ros2_ubuntu
      vars:
        install_ros2_distro: "dashing"
        install_ros2: "ros-base"

    - name: "==> Install Ubuntu Desktop"
      include_role:
        name: itnok.manage_pkg_ubuntu
      vars:
        manage_pkg_app:
          - "ubuntu-desktop"

    - name: "==> Install xserver HWE optimization"
      include_role:
        name: itnok.manage_pkg_ubuntu
      vars:
        manage_pkg_app_install_recommends: yes
        manage_pkg_app:
          - "xserver-xorg-hwe-18.04"

    - name: "==> Upgrade the whole OS & all packages"
      include_role:
        name: itnok.update_ubuntu

    - name: "==> Install SDDM login manager"
      include_role:
        name: itnok.manage_pkg_ubuntu
      vars:
        install_dependency:
          - "qml-module-qtquick-controls"
          - "qml-module-qtquick-layouts"
        manage_pkg_dependency: "{{ __manage_pkg_dependency + install_dependency }}"
        manage_pkg_app:
          - "sddm"

    - name: "Download Chili SDDM theme"
      get_url:
        url: "https://github.com/MarianArlt/sddm-chili/archive/0.1.5.tar.gz"
        dest: "/tmp/sddm-chili.tar.gz"
        checksum: "sha256:a3c0607bf70f448fff0a271624e3bc15af978894c04c98355d00a57431e49a0f"

    - name: "Make sure '/usr/share/sddm/themes/chili' directory exists"
      file:
        path: "/usr/share/sddm/themes/chili"
        state: directory
        owner: root
        group: root

    - name: "Install Chili theme for SDDM"
      unarchive:
        src: "/tmp/sddm-chili.tar.gz"
        dest: "/usr/share/sddm/themes/chili"
        remote_src: yes
        extra_opts:
          - "--strip-components"
          - "1"

    - name: "Set Chili as default SDDM theme"
      ini_file:
        path: "/etc/sddm.conf"
        section: "Theme"
        option: "Current"
        value: "chili"
        state: present
        backup: yes

    - name: "==> Uninstall GDM3 login manager"
      include_role:
        name: itnok.manage_pkg_ubuntu
      vars:
        manage_pkg_app_do: "absent"
        manage_pkg_app:
          - "gdm3"

    - name: "Reboot of {{ ansible_host }} to activate SDDM"
      reboot:
        reboot_timeout: 300

    - name: "==> Install Cinnamon"
      include_role:
        name: itnok.manage_pkg_ubuntu
      vars:
        install_dependency:
          - "dconf-tools"
          - "python3-psutil"
        manage_pkg_dependency: "{{ __manage_pkg_dependency + install_dependency }}"
        manage_pkg_repo:
          - "ppa:embrosyn/cinnamon"
        manage_pkg_app:
          - "cinnamon"

    - name: "==> Install Cinnamon customizations"
      include_role:
        name: itnok.manage_pkg_ubuntu
      vars:
        manage_pkg_repo:
          - "ppa:noobslab/macbuntu"
        manage_pkg_app:
          - "macbuntu-os-icons-v1804"
          - "macbuntu-os-ithemes-v1804"
          - "macbuntu-os-plank-theme-v1804"
          - "plank"

    - name: "Send to remote system UI customization files"
      copy:
        src: "files/{{ item }}"
        dest: "/tmp/{{ item }}"
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
        mode: u=rw,g=rw,o=r
      with_items:
        - "cinnamon-ui.dconf"
        - "plank-dock.dconf"

    - name: "Customize UI"
      shell: "dbus-launch dconf load {{ item.key }} < /tmp/{{ item.conf }}"
      with_items:
        - { "key": "/org/cinnamon/", "conf": "cinnamon-ui.dconf" }
        - { "key": "/net/launchpad/plank/docks/", "conf": "plank-dock.dconf" }
      become: yes
      become_user: "{{ remote_user }}"
      become_method: sudo

    - name: "Create a autostart directory if it does not exist"
      file:
        path: "/home/{{ remote_user }}/.config/autostart"
        state: directory
        mode: "0755"

    - name: "Set Plank to autostart on login"
      copy:
        src: "files/plank.desktop"
        dest: "/home/{{ remote_user }}/.config/autostart/plank.desktop"
        owner: "{{ remote_user }}"
        group: "{{ remote_user }}"
        mode: u=rw,g=rw,o=r

    - name: "==> Install Mesa"
      include_role:
        name: itnok.manage_pkg_ubuntu
      vars:
        manage_pkg_repo:
          - "ppa:kisak/kisak-mesa"

    - name: "==> Upgrade the whole OS & all packages"
      include_role:
        name: itnok.update_ubuntu
